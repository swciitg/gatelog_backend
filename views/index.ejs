<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>All Khokha Entries</title>

  <!-- jQuery & DataTables -->
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.datatables.net/1.13.4/js/jquery.dataTables.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/1.13.4/css/jquery.dataTables.min.css">
  <script src="https://cdn.datatables.net/responsive/2.4.1/js/dataTables.responsive.min.js"></script>
  <link rel="stylesheet" href="https://cdn.datatables.net/responsive/2.4.1/css/responsive.dataTables.min.css">

  <!-- Bootstrap -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" />
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

  <!-- SheetJS -->
  <script src="https://cdn.jsdelivr.net/npm/xlsx@0.18.5/dist/xlsx.full.min.js"></script>

  <style>
    body { font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; background-color: #ececec; color: #090909; margin: 0; padding: 20px; box-shadow: inset 0 0 50px #787676; }
    .logout-link { position: absolute; top: 30px; right: 80px; color: #20363d; text-decoration: none; font-weight: bold; transition: color 0.3s ease; }
    .logout-link:hover { color: #78878d; }
    .container { background-color:#ececec; padding: 40px; border-radius: 12px; box-shadow: 0 8px 16px rgba(0,0,0,0.5); max-width: 95%; margin: auto; font-size: 1.1rem; }
    h1 { color: #121213; text-align: center; margin-bottom: 30px; font-weight: 500; font-size: 3rem; }
    .dataTables_length{ padding-bottom: 20px; }
    .dataTables_length select { background-color: #1b1b1b; color: #090909; padding: 4px 8px; }
    .dataTables_length select option { background-color: #ececec; color: #090909; }
    .dataTables_paginate .paginate_button { color: #090909 !important; border: 1px solid #333 !important; border-radius: 5px; margin: 2px; }
    ::-webkit-scrollbar { height: 10px; }
    ::-webkit-scrollbar-track { background: #d6d0d0; }
    ::-webkit-scrollbar-thumb { background: #5c6976; border-radius: 10px; }
    ::-webkit-scrollbar-thumb:hover { background: #888; }
    div.dataTables_scroll { border-radius: 6px; overflow-x: auto; border: 1px solid #444 !important; }
    table.dataTable thead { background-color: #334a61; color: #f4f7f9d7; border-radius: 15px 15px 0 0; }
    table.dataTable thead th, table.dataTable tbody td { text-align: center; vertical-align: middle; padding: 12px 25px; }
    #entriesTable tbody tr:hover { background-color: rgba(128,206,241,0.1) !important; cursor: pointer; }
    .badge-open { background:#fff3cd; color:#664d03; }
    .badge-closed { background:#d1e7dd; color:#0f5132; }
    .btn-compact { padding: .2rem .5rem; font-size: .8rem; }
    @media (max-width: 600px) { .container { padding: 15px; } h1{ font-size: 2rem; font-weight: 300; } }

    /* mini card for modal details */
    .mini-card { background:#f8f9fa; border:1px solid #e9ecef; border-radius:12px; padding:12px 14px; }
    .mini-card p { margin:0 0 6px; }

    /* Hide DataTables default "Processing..." */
    div.dataTables_processing { display: none !important; }

    /* Pretty loader overlay */
    .loader-overlay {
      position: fixed;
      inset: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba(20,23,28,0.35);
      backdrop-filter: blur(2px);
      -webkit-backdrop-filter: blur(2px);
      z-index: 2000;
      opacity: 0;
      transition: opacity .2s ease;
    }
    .loader-overlay.hidden { display: none; }
    .loader-overlay.visible { opacity: 1; }

    .loader-card {
      display: flex;
      align-items: center;
      gap: 14px;
      padding: 18px 22px;
      min-width: 260px;
      background: #ffffff;
      color: #222;
      border-radius: 14px;
      box-shadow: 0 20px 60px rgba(0,0,0,.18);
    }
    .spinner {
      width: 28px; height: 28px;
      border-radius: 50%;
      border: 3px solid rgba(0,0,0,.12);
      border-top-color: #0d6efd; /* Bootstrap primary */
      animation: spin 1s linear infinite;
    }
    @keyframes spin { to { transform: rotate(360deg); } }
    .loader-text { font-weight: 600; letter-spacing: .2px; }

    /* Optional: loading state for confirm button */
    #confirmCloseBtn.is-loading {
      position: relative;
      pointer-events: none;
      opacity: .85;
    }
    #confirmCloseBtn.is-loading::after {
      content: "";
      position: absolute;
      right: 10px; top: 50%; transform: translateY(-50%);
      width: 16px; height: 16px; border-radius: 50%;
      border: 2px solid rgba(255,255,255,.4);
      border-top-color: #fff;
      animation: spin .9s linear infinite;
    }
  </style>
</head>

<body>
  <!-- Global Loader -->
  <div id="appLoader" class="loader-overlay hidden" aria-hidden="true">
    <div class="loader-card" role="status" aria-live="polite" aria-label="Loading">
      <div class="spinner" aria-hidden="true"></div>
      <div class="loader-text" id="loaderText">Loading…</div>
    </div>
  </div>

  <div class="container">
    <h1 id="welcomemsg"></h1>
    <a href="<%= process.env.BASE_URL %>/new/admin/logout" class="logout-link">Logout</a>

    <h1>All Khokha Entries</h1>

    <div class="d-flex flex-wrap justify-content-end mb-3 gap-2">
      <a class="btn btn-primary" href="<%= BASE_URL %>/entries/new">+ Add New Entry</a>

      <!-- Close by roll -->
      <div class="input-group" style="max-width: 360px;">
        <input id="close-roll-input" class="form-control" placeholder="Close by Roll No">
        <button id="btn-close-by-roll" class="btn btn-danger">Close</button>
      </div>

      <!-- Export -->
      <button id="btn-export-xlsx" class="btn btn-success">⬇ Export Excel</button>
      <button id="btn-export-csv" class="btn btn-outline-secondary">⬇ Export CSV</button>
    </div>

    <!-- FILTER TOOLBAR -->
    <div class="card p-3 mb-3">
      <div class="row g-2 align-items-end">
        <div class="col-md-2"><label class="form-label">Name</label><input id="f-name" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Roll No</label><input id="f-roll" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Outlook</label><input id="f-outlook" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Phone</label><input id="f-phone" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Room</label><input id="f-room" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Destination</label>
          <select id="f-dest" class="form-select">
            <option value="">All</option>
            <option value="City">City</option>
            <option value="Khoka">Khoka</option>
            <option value="Other">Other</option>
          </select>
        </div>

        <div class="col-md-2">
          <label class="form-label">Hostel</label>
          <select id="f-hostel" class="form-select">
            <option value="">All</option>
            <option>LOHIT</option><option>BRAHMAPUTRA</option><option>DISANG</option>
            <option>KAMENG</option><option>BARAK</option><option>MANAS</option>
            <option>DIHING</option><option>UMIAM</option><option>SIANG</option>
            <option>KAPILI</option><option>DHANSIRI</option><option>SUBANSIRI</option>
            <option>MSH</option><option>GAURANG</option><option>DIBANG</option>
            <option>NON-HOSTELLER</option>
          </select>
        </div>
        <div class="col-md-2">
          <label class="form-label">Status</label>
          <select id="f-status" class="form-select">
            <option value="">All</option>
            <option>Open</option>
            <option>Closed</option>
          </select>
        </div>
        <div class="col-md-2">
          <label class="form-label">Out Gate</label>
          <select id="f-outgate" class="form-select">
            <option value="">All</option>
            <option>Main_Gate</option>
            <option>KV_Gate</option>
            <option>Khoka_Gate</option>
            <option>AUTO_CLOSED</option>
          </select>
        </div>
        <div class="col-md-2">
          <label class="form-label">In Gate</label>
          <select id="f-ingate" class="form-select">
            <option value="">All</option>
            <option>Main_Gate</option>
            <option>KV_Gate</option>
            <option>Khoka_Gate</option>
            <option>AUTO_CLOSED</option>
            <option>—</option>
          </select>
        </div>

        <div class="col-md-2"><label class="form-label">Check-Out from</label><input id="f-co-from" type="datetime-local" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Check-Out to</label><input id="f-co-to" type="datetime-local" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Check-In from</label><input id="f-ci-from" type="datetime-local" class="form-control" /></div>
        <div class="col-md-2"><label class="form-label">Check-In to</label><input id="f-ci-to" type="datetime-local" class="form-control" /></div>

        <div class="col-md-2"><button id="f-reset" class="btn btn-outline-secondary w-100">Reset Filters</button></div>
      </div>
    </div>

    <!-- TABLE -->
    <table id="entriesTable" class="display nowrap" style="width:100%">
      <thead>
        <tr>
          <th>Name</th>
          <th>Roll No</th>
          <th>Outlook</th>
          <th>Phone</th>
          <th>Hostel</th>
          <th>Room</th>
          <th>Destination</th>
          <th>Status</th>
          <th>Gate</th>
          <th>Check-Out</th>
          <th>Check-In</th>
          <th>Actions</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </div>

  <!-- DETAILS MODAL (row click) -->
  <div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
    <div class="modal-dialog"><div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="detailsModalLabel">Entry Details</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="modalContent"></div>
      <div class="modal-footer">
        <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Close</button>
        <!-- Close action lives here -->
        <button type="button" class="btn btn-danger d-none" id="detailsCloseBtn" data-roll="">Close Entry</button>
      </div>
    </div></div>
  </div>

  <!-- CONFIRM CLOSE MODAL -->
  <div class="modal fade" id="confirmCloseModal" tabindex="-1" aria-labelledby="confirmCloseLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
      <div class="modal-content">
        <div class="modal-header">
          <h5 id="confirmCloseLabel" class="modal-title">Confirm Close</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="confirmCloseXBtn"></button>
        </div>
        <div class="modal-body">
          <div id="confirmCloseContent" class="mini-card"></div>
          <div id="confirmCloseNote" class="text-muted small mt-2"></div>
          <div id="confirmCloseError" class="text-danger small mt-2 d-none"></div>
          <div id="confirmCloseSuccess" class="text-success small mt-2 d-none"></div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" id="confirmCloseCancel">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmCloseBtn" disabled>Confirm Close</button>
        </div>
      </div>
    </div>
  </div>

  <!-- Welcome typer -->
  <script>
    document.addEventListener("DOMContentLoaded", function () {
      const userEmail = "<%= user %>";
      const text = `Welcome, ${userEmail}!`;
      const element = document.getElementById("welcomemsg");
      let index = 0;
      (function typeNextChar() {
        if (index < text.length) { element.textContent += text.charAt(index++); setTimeout(typeNextChar, 80); }
      })();
    });
  </script>

  <!-- DataTables server-side + filters + export + close-from-modal + global loader -->
  <script>
    const BASE_URL = '<%= BASE_URL %>';
    let table;
    let currentDetailsRow = null;

    // ===== Loader helpers =====
    const loaderEl = () => document.getElementById('appLoader');
    const loaderTextEl = () => document.getElementById('loaderText');

    function showLoader(text = 'Loading…') {
      const overlay = loaderEl();
      loaderTextEl().textContent = text;
      overlay.classList.remove('hidden');
      // allow paint, then fade-in
      requestAnimationFrame(() => overlay.classList.add('visible'));
    }
    function hideLoader() {
      const overlay = loaderEl();
      overlay.classList.remove('visible');
      setTimeout(() => overlay.classList.add('hidden'), 180);
    }

    const collectFilters = () => ({
      name:   document.getElementById('f-name').value.trim(),
      rollNumber: document.getElementById('f-roll').value.trim(),
      outlook: document.getElementById('f-outlook').value.trim(),
      phone:  document.getElementById('f-phone').value.trim(),
      room:   document.getElementById('f-room').value.trim(),
      destination: document.getElementById('f-dest').value,
      hostel: document.getElementById('f-hostel').value,
      status: document.getElementById('f-status').value,
      outGate:document.getElementById('f-outgate').value,
      inGate: document.getElementById('f-ingate').value,
      coFrom: document.getElementById('f-co-from').value,
      coTo:   document.getElementById('f-co-to').value,
      ciFrom: document.getElementById('f-ci-from').value,
      ciTo:   document.getElementById('f-ci-to').value
    });

    // Mini card renderer for confirm modal
    function renderEntryMiniCard(row) {
      if (!row) return '<p class="mb-0">No data.</p>';
      return `
        <p><strong>${row.name || '—'}</strong> • Roll: <code>${row.rollNumber || '—'}</code></p>
        <p class="mb-1">Outlook: ${row.outlookEmail || '—'}</p>
        <p class="mb-1">Phone: ${row.phoneNumber || '—'}</p>
        <p class="mb-1">Hostel: ${row.hostel || '—'} • Room: ${row.roomNumber || '—'}</p>
        <p class="mb-1">Destination: ${row.destination || '—'}</p>
        <p class="mb-1">Gate: Out ${row.checkOutGate || '—'} • In ${row.checkInGate || '—'}</p>
        <p class="mb-0">Check-Out: ${row.checkOutTime ? new Date(row.checkOutTime).toLocaleString() : '—'}
          • Check-In: ${row.checkInTime ? new Date(row.checkInTime).toLocaleString() : '—'}</p>
      `;
    }

    // Fetch open entry by roll
    async function fetchOpenEntryByRoll(roll) {
      const payload = { draw: 1, start: 0, length: 1, filters: { rollNumber: String(roll).trim(), status: 'Open' } };
      const resp = await fetch(`${BASE_URL}/entries/table`, {
        method: 'POST', headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
      });
      if (!resp.ok) return null;
      const json = await resp.json().catch(() => null);
      if (!json || !Array.isArray(json.data)) return null;
      return json.data[0] || null;
    }

    // ---------- Close-by-roll (modal flow) ----------
    let pendingCloseRoll = null;
    let pendingCloseRow  = null;
    const confirmModalEl = document.getElementById('confirmCloseModal');
    const confirmModal   = new bootstrap.Modal(confirmModalEl);
    const confirmBtn     = document.getElementById('confirmCloseBtn');
    const confirmContent = document.getElementById('confirmCloseContent');
    const confirmNote    = document.getElementById('confirmCloseNote');
    const confirmErr     = document.getElementById('confirmCloseError');
    const confirmOk      = document.getElementById('confirmCloseSuccess');

    function resetConfirmModal() {
      confirmBtn.disabled = true;
      confirmBtn.classList.remove('is-loading');
      confirmContent.innerHTML = '';
      confirmNote.textContent = '';
      confirmErr.textContent = '';
      confirmErr.classList.add('d-none');
      confirmOk.textContent = '';
      confirmOk.classList.add('d-none');
    }

    async function openCloseModalForRoll(roll, rowDataOptional) {
      resetConfirmModal();
      pendingCloseRoll = roll;
      confirmNote.textContent = `You are about to close the open entry for roll ${roll}.`;

      showLoader('Fetching entry…');
      let row = rowDataOptional || null;
      if (!row) {
        row = await fetchOpenEntryByRoll(roll);
      }
      hideLoader();

      if (!row) {
        confirmContent.innerHTML = `<p class="mb-0">No open entry found for roll <strong>${roll}</strong>.</p>`;
        confirmBtn.disabled = true;
      } else {
        pendingCloseRow = row;
        confirmContent.innerHTML = renderEntryMiniCard(row);
        confirmBtn.disabled = false;
      }
      confirmModal.show();
    }

    async function closeByRoll(roll) {
      try {
        confirmBtn.disabled = true;
        confirmBtn.classList.add('is-loading');
        confirmErr.classList.add('d-none');
        confirmErr.textContent = '';

        showLoader('Closing entry…');
        const resp = await fetch(`${BASE_URL}/entries/close-by-roll`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ rollNumber: roll, checkInGate: 'AUTO_CLOSED' })
        });
        hideLoader();

        if (!resp.ok) {
          const t = await resp.text();
          confirmBtn.classList.remove('is-loading');
          confirmBtn.disabled = false;
          confirmErr.textContent = t || 'Close failed.';
          confirmErr.classList.remove('d-none');
          return;
        }

        confirmOk.textContent = 'Entry closed successfully.';
        confirmOk.classList.remove('d-none');

        // Refresh table, then hide both modals
        $('#entriesTable').DataTable().ajax.reload(null, false);

        setTimeout(() => {
          confirmModal.hide();
          const detailsEl = document.getElementById('detailsModal');
          const detailsInst = bootstrap.Modal.getInstance(detailsEl);
          if (detailsInst) detailsInst.hide();
        }, 900);
      } catch (err) {
        hideLoader();
        confirmBtn.classList.remove('is-loading');
        confirmBtn.disabled = false;
        confirmErr.textContent = 'Close failed.';
        confirmErr.classList.remove('d-none');
        console.error(err);
      }
    }

    // ===== DataTable + loader wiring =====
    let initialDrawDone = false;
    let userTriggeredLoad = false; // only show loader on user actions

    $(document).ready(function () {
      const $tableEl = $('#entriesTable');

      // Hook loader to DT events (before init is fine)
      $tableEl.on('preXhr.dt', function () {
        if (!initialDrawDone || userTriggeredLoad) {
          showLoader('Loading entries…');
        }
      });
      $tableEl.on('xhr.dt error.dt', function () {
        hideLoader();
        initialDrawDone = true;
        userTriggeredLoad = false;
      });

      table = $tableEl.DataTable({
        serverSide: true,
        processing: true,      // built-in hidden via CSS; we use our own overlay
        responsive: true,
        deferRender: true,
        pageLength: 25,
        lengthMenu: [10, 25, 50, 100, 200],
        order: [], // rely on backend sorting
        ajax: {
          url: `${BASE_URL}/entries/table`,
          type: 'POST',
          contentType: 'application/json',
          data: function (d) {
            return JSON.stringify({
              draw: d.draw, start: d.start, length: d.length,
              filters: collectFilters()
            });
          },
          dataSrc: 'data'
        },
        columns: [
          { data: 'name' },
          { data: 'rollNumber' },
          { data: 'outlookEmail' },
          { data: 'phoneNumber' },
          { data: 'hostel' },
          { data: 'roomNumber' },
          { data: 'destination' },
          { data: 'isClosed', render: (v) => v
              ? '<span class="badge badge-closed">Closed</span>'
              : '<span class="badge badge-open">Open</span>' },
          { data: null, orderable: false, searchable: false, render: (row) =>
              `<div><strong>Out:</strong> ${row.checkOutGate || ''}</div>
               <div><strong>In:</strong> ${row.checkInGate || '—'}</div>` },
          { data: 'checkOutTime', render: (iso) => iso ? new Date(iso).toLocaleString() : '—' },
          { data: 'checkInTime',  render: (iso) => iso ? new Date(iso).toLocaleString()  : '—' },
          { data: null, orderable: false, searchable: false, render: () => '<span class="text-muted">—</span>' }
        ]
      });

      // Any filter change → reload (user-triggered)
      $('#f-name,#f-roll,#f-outlook,#f-phone,#f-room').on('input',  () => { userTriggeredLoad = true; table.ajax.reload(null, true); });
      $('#f-dest,#f-hostel,#f-status,#f-outgate,#f-ingate,#f-co-from,#f-co-to,#f-ci-from,#f-ci-to')
        .on('change', () => { userTriggeredLoad = true; table.ajax.reload(null, true); });

      $('#f-reset').on('click', function(){
        $('#f-name,#f-roll,#f-outlook,#f-phone,#f-room').val('');
        $('#f-dest,#f-hostel,#f-status,#f-outgate,#f-ingate').val('');
        $('#f-co-from,#f-co-to,#f-ci-from,#f-ci-to').val('');
        userTriggeredLoad = true;
        table.ajax.reload(null, true);
      });

      // Periodic refresh (silent)
      setInterval(() => table.ajax.reload(null, false), 30000);

      // Row click → open details modal (Close button is inside this modal)
      $('#entriesTable tbody').on('click', 'tr', function () {
        const row = table.row(this).data();
        if (!row) return;

        currentDetailsRow = row;

        const detailsHtml = `
          <p><strong>Name:</strong> ${row.name}</p>
          <p><strong>Roll No:</strong> ${row.rollNumber}</p>
          <p><strong>Outlook:</strong> ${row.outlookEmail}</p>
          <p><strong>Phone:</strong> ${row.phoneNumber}</p>
          <p><strong>Hostel:</strong> ${row.hostel}</p>
          <p><strong>Room:</strong> ${row.roomNumber}</p>
          <p><strong>Destination:</strong> ${row.destination}</p>
          <p><strong>Status:</strong> ${row.isClosed ? 'Closed' : 'Open'}</p>
          <p><strong>Gate:</strong> Out: ${row.checkOutGate || ''} • In: ${row.checkInGate || '—'}</p>
          <p><strong>Check-Out:</strong> ${row.checkOutTime ? new Date(row.checkOutTime).toLocaleString() : '—'}</p>
          <p><strong>Check-In:</strong> ${row.checkInTime ? new Date(row.checkInTime).toLocaleString() : '—'}</p>
        `;
        $('#modalContent').html(detailsHtml);

        const btn = document.getElementById('detailsCloseBtn');
        btn.dataset.roll = row.rollNumber || '';
        if (row.isClosed) {
          btn.classList.add('d-none');
        } else {
          btn.classList.remove('d-none');
        }

        new bootstrap.Modal(document.getElementById('detailsModal')).show();
      });

      // Topbar Close-by-roll → fetch then show confirm modal
      document.getElementById('btn-close-by-roll').addEventListener('click', async () => {
        const roll = document.getElementById('close-roll-input').value.trim();
        if (!roll) {
          resetConfirmModal();
          confirmContent.innerHTML = '<p class="mb-0">Please enter a roll number first.</p>';
          confirmBtn.disabled = true;
          confirmModal.show();
          return;
        }
        await openCloseModalForRoll(roll);
      });

      // Export (optional small loader flash)
      const postExport = (format) => {
        const f = collectFilters();
        const form = document.createElement('form');
        form.method = 'POST';
        form.action = `${BASE_URL}/entries/export`;
        const add = (k,v) => { const i=document.createElement('input'); i.type='hidden'; i.name=k; i.value=v; form.appendChild(i); };
        add('filters', JSON.stringify(f));
        add('format', format); // 'xlsx' or 'csv'
        document.body.appendChild(form);
        showLoader('Preparing export…');
        setTimeout(hideLoader, 1500);
        form.submit();
        form.remove();
      };
      $('#btn-export-xlsx').on('click', () => postExport('xlsx'));
      $('#btn-export-csv').on('click',  () => postExport('csv'));
    });

    // Click "Close Entry" inside the details modal → open confirm modal
    document.getElementById('detailsCloseBtn').addEventListener('click', async (e) => {
      const roll = e.currentTarget.dataset.roll;
      if (!roll) return;
      await openCloseModalForRoll(roll, currentDetailsRow);
    });

    // Confirm button in confirm modal
    document.getElementById('confirmCloseBtn').addEventListener('click', async () => {
      if (!pendingCloseRoll) return;
      await closeByRoll(pendingCloseRoll);
    });
  </script>
</body>
</html>
